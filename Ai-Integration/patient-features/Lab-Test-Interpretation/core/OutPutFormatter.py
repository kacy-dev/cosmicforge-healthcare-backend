
import io
from typing import Dict, Any
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.units import inch
import json
import csv
import xml.etree.ElementTree as ET
import logging

class OutputFormatter:
    def __init__(self):
        self.logger = logging.getLogger(__name__)

    def to_plain_text(self, interpretations: Dict[str, Dict[str, Any]]) -> str:
        try:
            output = ""
            for test, data in interpretations.items():
                output += f"{test}:\n"
                output += f"Value: {data.get('value', 'N/A')}\n"
                output += f"Status: {data.get('status', 'N/A')}\n"
                output += f"Interpretation: {data.get('interpretation', 'N/A')}\n"
                output += f"Recommendation: {data.get('recommendation', 'N/A')}\n\n"
            return output
        except Exception as e:
            self.logger.error(f"Error in to_plain_text: {str(e)}")
            raise

    def to_html(self, interpretations: Dict[str, Dict[str, Any]]) -> str:
        try:
            html = "<html><body>"
            for test, data in interpretations.items():
                html += f"<h2>{test}</h2>"
                html += f"<p><strong>Value:</strong> {data.get('value', 'N/A')}</p>"
                html += f"<p><strong>Status:</strong> {data.get('status', 'N/A')}</p>"
                html += f"<p><strong>Interpretation:</strong> {data.get('interpretation', 'N/A')}</p>"
                html += f"<p><strong>Recommendation:</strong> {data.get('recommendation', 'N/A')}</p>"
            html += "</body></html>"
            return html
        except Exception as e:
            self.logger.error(f"Error in to_html: {str(e)}")
            raise

    def to_pdf(self, interpretations: Dict[str, Dict[str, Any]], output_path: str, patient_info: Dict[str, str]):
        try:
            buffer = io.BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=letter, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
            
            story = []
            styles = getSampleStyleSheet()
            styles.add(ParagraphStyle(name='Heading2', fontSize=14, spaceBefore=12, spaceAfter=6))
            styles.add(ParagraphStyle(name='BodyText', fontSize=11, spaceBefore=6, spaceAfter=6))

            story.append(Paragraph("Lab Test Results Report", styles['Heading1']))
            story.append(Spacer(1, 12))

            patient_data = [
                ["Patient Name:", patient_info.get('name', 'N/A')],
                ["Age:", patient_info.get('age', 'N/A')],
                ["Gender:", patient_info.get('gender', 'N/A')],
                ["Date of Report:", patient_info.get('report_date', 'N/A')]
            ]
            patient_table = Table(patient_data, colWidths=[2*inch, 4*inch])
            patient_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
                ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ]))
            story.append(patient_table)
            story.append(Spacer(1, 12))

            for test_name, data in interpretations.items():
                story.append(Paragraph(test_name, styles['Heading2']))
                story.append(Paragraph(f"Value: {data.get('value', 'N/A')}", styles['BodyText']))
                story.append(Paragraph(f"Status: {data.get('status', 'N/A')}", styles['BodyText']))
                story.append(Paragraph("Interpretation:", styles['BodyText']))
                story.append(Paragraph(data.get('interpretation', 'N/A'), styles['BodyText']))
                story.append(Paragraph("Recommendation:", styles['BodyText']))
                story.append(Paragraph(data.get('recommendation', 'N/A'), styles['BodyText']))
                story.append(Spacer(1, 12))

            disclaimer = ("This report is generated by an AI system and should not replace professional medical advice. "
                          "Always consult with your healthcare provider for a comprehensive interpretation of your test "
                          "results and appropriate medical care.")
            story.append(Paragraph(disclaimer, ParagraphStyle(name='Disclaimer', fontSize=8, textColor=colors.grey)))

            doc.build(story)

            pdf = buffer.getvalue()
            buffer.close()
            with open(output_path, 'wb') as f:
                f.write(pdf)
            
            self.logger.info(f"PDF report generated successfully: {output_path}")
        except Exception as e:
            self.logger.error(f"Error in to_pdf: {str(e)}")
            raise

    def to_json(self, interpretations: Dict[str, Dict[str, Any]]) -> str:
        try:
            return json.dumps(interpretations, indent=2)
        except Exception as e:
            self.logger.error(f"Error in to_json: {str(e)}")
            raise

    def to_csv(self, interpretations: Dict[str, Dict[str, Any]], output_path: str):
        try:
            with open(output_path, 'w', newline='') as csvfile:
                fieldnames = ['Test', 'Value', 'Status', 'Interpretation', 'Recommendation']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                for test, data in interpretations.items():
                    writer.writerow({
                        'Test': test,
                        'Value': data.get('value', 'N/A'),
                        'Status': data.get('status', 'N/A'),
                        'Interpretation': data.get('interpretation', 'N/A'),
                        'Recommendation': data.get('recommendation', 'N/A')
                    })
            self.logger.info(f"CSV report generated successfully: {output_path}")
        except Exception as e:
            self.logger.error(f"Error in to_csv: {str(e)}")
            raise

    def to_xml(self, interpretations: Dict[str, Dict[str, Any]]) -> str:
        try:
            root = ET.Element("lab_results")
            for test, data in interpretations.items():
                test_elem = ET.SubElement(root, "test")
                ET.SubElement(test_elem, "name").text = test
                ET.SubElement(test_elem, "value").text = str(data.get('value', 'N/A'))
                ET.SubElement(test_elem, "status").text = data.get('status', 'N/A')
                ET.SubElement(test_elem, "interpretation").text = data.get('interpretation', 'N/A')
                ET.SubElement(test_elem, "recommendation").text = data.get('recommendation', 'N/A')
            return ET.tostring(root, encoding='unicode', method='xml')
        except Exception as e:
            self.logger.error(f"Error in to_xml: {str(e)}")
            raise
